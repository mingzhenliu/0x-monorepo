import { chaiSetup, provider, txDefaults, web3Wrapper } from '@0x/contracts-test-utils';
import { BlockchainLifecycle } from '@0x/dev-utils';
import { BigNumber } from '@0x/utils';
import * as chai from 'chai';

import { artifacts, LibTransactionParserContract } from '../src';

chaiSetup.configure();
const expect = chai.expect;
const blockchainLifecycle = new BlockchainLifecycle(web3Wrapper);

const KNOWN_FILL_TX = {
    // taken from coordinator specification
    signedTransactionData:
        '0xb4be83d500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000e36ea790bc9d7ab70c55260c66d52b1eca985f84000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078dc5d2d739606d31509c31d654056a45185ecb60000000000000000000000006ecbe1db9ef729cbe972c83fb886247691fb6beb0000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000ad78ebc5ac62000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000005c87b0879221cb37dcf690e02b0f9aecf44fcaa5ed9ce99697e86743795fa132596ff597000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b000000000000000000000000034d402f14d58e001d8efbe6585051bf9706aa064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b000000000000000000000000025b8fe1de9daf8ba351890744ff28cf7dfa8f5e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421ce8e3c600d933423172b5021158a6be2e818613ff8e762d70ef490c752fd98a626a215f09f169668990414de75a53da221c294a3002f796d004827258b641876e03000000000000000000000000000000000000000000000000000000000000',
    expectedParseOutput: [
        'fillOrder',
        [
            {
                makerAddress: '0xe36ea790bc9d7ab70c55260c66d52b1eca985f84',
                takerAddress: '0x0000000000000000000000000000000000000000',
                feeRecipientAddress: '0x78dc5d2d739606d31509c31d654056a45185ecb6',
                senderAddress: '0x6ecbe1db9ef729cbe972c83fb886247691fb6beb',
                makerAssetAmount: new BigNumber('100000000000000000000'),
                takerAssetAmount: new BigNumber('200000000000000000000'),
                makerFee: new BigNumber('1000000000000000000'),
                takerFee: new BigNumber('1000000000000000000'),
                expirationTimeSeconds: new BigNumber('1552396423'),
                salt: new BigNumber('66097384406870180066678463045003379626790660770396923976862707230261946348951'),
                makerAssetData: '0xf47261b000000000000000000000000034d402f14d58e001d8efbe6585051bf9706aa064',
                takerAssetData: '0xf47261b000000000000000000000000025b8fe1de9daf8ba351890744ff28cf7dfa8f5e3',
            },
        ],
        [new BigNumber('100000000000000000000')],
        [
            '0x1ce8e3c600d933423172b5021158a6be2e818613ff8e762d70ef490c752fd98a626a215f09f169668990414de75a53da221c294a3002f796d004827258b641876e03',
        ],
    ],
};

const KNOWN_CANCEL_TX = {
    // taken from coordinator specification
    signedTransactionData:
        '0xd46b02c30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e36ea790bc9d7ab70c55260c66d52b1eca985f84000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078dc5d2d739606d31509c31d654056a45185ecb60000000000000000000000006ecbe1db9ef729cbe972c83fb886247691fb6beb0000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000ad78ebc5ac62000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000005c87b087aaed1cee5db78cfae5b9be5a1a30c67fc3515aacfa536bea1aa33deb90e4d9a8000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b000000000000000000000000034d402f14d58e001d8efbe6585051bf9706aa064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b000000000000000000000000025b8fe1de9daf8ba351890744ff28cf7dfa8f5e300000000000000000000000000000000000000000000000000000000',
    expectedParseOutput: [
        'cancelOrder',
        [
            {
                makerAddress: '0xe36ea790bc9d7ab70c55260c66d52b1eca985f84',
                takerAddress: '0x0000000000000000000000000000000000000000',
                feeRecipientAddress: '0x78dc5d2d739606d31509c31d654056a45185ecb6',
                senderAddress: '0x6ecbe1db9ef729cbe972c83fb886247691fb6beb',
                makerAssetAmount: new BigNumber('100000000000000000000'),
                takerAssetAmount: new BigNumber('200000000000000000000'),
                makerFee: new BigNumber('1000000000000000000'),
                takerFee: new BigNumber('1000000000000000000'),
                expirationTimeSeconds: new BigNumber('1552396423'),
                salt: new BigNumber('77312126688742331532122416049113540452139616608135326468253415920865328290216'),
                makerAssetData: '0xf47261b000000000000000000000000034d402f14d58e001d8efbe6585051bf9706aa064',
                takerAssetData: '0xf47261b000000000000000000000000025b8fe1de9daf8ba351890744ff28cf7dfa8f5e3',
            },
        ],
        [],
        [],
    ],
};

describe('LibTransactionParser', () => {
    let libTxParser: LibTransactionParserContract;

    before(async () => {
        await blockchainLifecycle.startAsync();
        libTxParser = await LibTransactionParserContract.deployFrom0xArtifactAsync(
            artifacts.LibTransactionParser,
            provider,
            txDefaults,
        );
    });
    after(async () => {
        await blockchainLifecycle.revertAsync();
    });

    it('should parse a fill transaction', async () => {
        expect(await libTxParser.parseTransaction.callAsync(KNOWN_FILL_TX.signedTransactionData)).to.deep.equal(
            KNOWN_FILL_TX.expectedParseOutput,
        );
    });

    it('should parse a cancel transaction', async () => {
        expect(await libTxParser.parseTransaction.callAsync(KNOWN_CANCEL_TX.signedTransactionData)).to.deep.equal(
            KNOWN_CANCEL_TX.expectedParseOutput,
        );
    });
});
